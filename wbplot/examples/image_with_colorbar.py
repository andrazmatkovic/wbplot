"""
Demonstration of core functionality.

Note: wbplot must be located somewhere in your system PATH environment variable.

"""

from wbplot.wbplot import create_map
import matplotlib.pyplot as plt
import matplotlib.colors as clrs
from matplotlib import colorbar
from os.path import join
import numpy as np

# change this to your desired output directory
save_dir = "/Users/jbb/Desktop/"

# this code is used to plot 180 left-hemisphere parcellated scalars. it assumes
# that the order is consistent with the HCP MMP1.0, as defined in the
# supplementary material of Glasser et al. (2016) Nature
pscalars = np.array(
    [1.55, 1.50, 1.49, 1.50, 1.48, 1.45, 1.43, 1.62, 1.55, 1.38, 1.35, 1.32,
     1.51, 1.70, 1.39, 1.48, 1.39, 1.34, 1.43, 1.40, 1.39, 1.38, 1.48, 1.74,
     1.26, 1.21, 1.29, 1.29, 1.28, 1.34, 1.39, 1.31, 1.39, 1.40, 1.34, 1.47,
     1.29, 1.25, 1.28, 1.42, 1.26, 1.27, 1.29, 1.22, 1.24, 1.31, 1.34, 1.42,
     1.34, 1.36, 1.44, 1.37, 1.54, 1.43, 1.37, 1.32, 1.16, 1.22, 1.13, 1.23,
     1.14, 1.18, 1.22, 1.18, 1.22, 1.39, 1.26, 1.24, 1.16, 1.19, 1.19, 1.20,
     1.30, 1.27, 1.30, 1.24, 1.20, 1.26, 1.35, 1.34, 1.35, 1.28, 1.27, 1.21,
     1.24, 1.22, 1.19, 1.15, 1.22, 1.18, 1.20, 1.26, 1.20, 1.22, 1.39, 1.31,
     1.29, 1.22, 1.32, 1.29, 1.38, 1.37, 1.32, 1.47, 1.34, 1.17, 1.27, 1.20,
     1.11, 1.41, 1.22, 1.11, 1.26, 1.19, 1.24, 1.28, 1.35, 1.35, 1.72, 1.28,
     1.38, 1.14, 1.16, 1.51, 1.31, 1.30, 1.26, 1.24, 1.33, 1.27, 1.08, 1.19,
     1.22, 1.21, 1.22, 1.23, 1.24, 1.30, 1.36, 1.36, 1.35, 1.35, 1.28, 1.34,
     1.34, 1.34, 1.26, 1.23, 1.25, 1.29, 1.26, 1.40, 1.41, 1.38, 1.20, 1.40,
     1.33, 1.37, 1.37, 1.35, 1.31, 1.26, 1.40, 1.20, 1.16, 1.42, 1.21, 1.32,
     1.30, 1.24, 1.24, 1.13, 1.56, 1.62, 1.39, 1.22, 1.26, 1.17, 1.19, 1.12])
# note: these are human myelin map values

fname = join(save_dir, "test.png")
fig, ax = create_map(fname=fname, pscalars=pscalars)
# the file should now be saved in the specified output directory as "test.png"
# note that the title is added to the interactive image, not the image written
# to file

# you can use the returned figure and axis instances to interactively modify
# the plot
ax.text(0.5, 0.1, "text not in test.png", ha='center', va='center',
        transform=ax.transAxes, fontsize=12, color='k')
plt.show()

# other options
fname = join(save_dir, "test_cbar.png")
fig2, _ = create_map(fname, pscalars=pscalars, cbar=True, cmap='viridis')
plt.show()
# note that the colorbar is added to the figure interactively, not to the
# image automatically generated by connectome workbench

# use portrait instead of landscape; add a colorbar manually
fig3, ax = create_map(fname=join(save_dir, 'test_portrait.png'),
                      pscalars=pscalars, cmap='plasma', scene_num=3)
ax.text(
    0.5, 1.05, "This should look similar to Fig. 1a", color='k', ha='center',
    transform=ax.transAxes)
cax = fig3.add_axes([0.2, 0.07, 0.6, 0.03])
cnorm = clrs.Normalize(vmin=1.1, vmax=1.6)
cmap = plt.get_cmap('plasma')
cbar = colorbar.ColorbarBase(
    cax, cmap=cmap, norm=cnorm,  orientation='horizontal')
cbar.set_ticks([])
cax.get_xaxis().set_tick_params(length=0, pad=-2)
cbar.set_ticklabels([])
cax.text(-0.025, 0.5, r"-2$\sigma$", ha='right', va='center',
         transform=cax.transAxes, fontsize=12, color='k')
cax.text(1.025, 0.5, r"2$\sigma$", ha='left', va='center',
         transform=cax.transAxes, fontsize=12, color='k')
cbar.outline.set_visible(False)
plt.show()
