from . import config, constants
from .utils import plots, images
import nibabel as nib
import numpy as np
from os import system, remove, rename
from os.path import sep, join

# Uncomment the line below to suppress console statements generated by nibabel
nib.imageglobals.logger.disabled = True


def pscalar(file_out, pscalars, orientation='portrait',
            hemisphere=None, vrange=None, cmap=None, transparent=False):
    """

    Parameters
    ----------
    file_out : str
        absolute path to filename where image is saved
    pscalars : numpy.ndarray
        parcel scalar values
    orientation : 'portrait' or 'landscape'
        orientation of the output image. if hemisphere is None (i.e., if data
        are bilateral), this argument is ignored.
    hemisphere : 'left' or 'right' or None
    cmap : str or :class:`~matplotlib.colors.Colormap` instance, default None
        colormap to use for plotting.
    transparent : bool
        make all white pixels in map transparent
    vrange : TODO

    Returns
    -------

    Notes
    -----
    For a list of available colormaps, see the wbplot.constants module or visit
    https://www.humanconnectome.org/software/workbench-command/-metric-palette.

    """

    if file_out[-4:] != ".png":
        file_out += ".png"

    cmap = plots.check_cmap(cmap)
    orientation = plots.check_orientation(orientation)
    hemisphere = images.check_hemisphere(pscalars, hemisphere)
    pscalars = images.map_unilateral_to_bilateral(
        pscalars=pscalars, hemisphere=hemisphere)

    images.write_parcellated_image(
        data=pscalars, fout=constants.DLABEL_FILE, cmap=cmap, vrange=vrange)

    scene, width, height = plots.map_params_to_scene(
        dtype='pscalars', orientation=orientation, hemisphere=hemisphere)

    cmd = 'wb_command -show-scene "{}" {} "{}" {} {}'.format(
        config.SCENE_FILE, scene, file_out, width, height)
    cmd += " >/dev/null 2>&1"
    system(cmd)

    if transparent:
        plots.make_transparent(file_out)


def dscalar(file_out, dscalars, orientation='portrait',
            hemisphere=None, cmap=None, transparent=False):

    """
    Save an image of dense scalars using Connnectome Workbench.

    Parameters
    ----------
    file_out : str
        absolute path to filename where image is saved
    dscalars : numpy.ndarray
        dense scalar values
    orientation : 'portrait' or 'landscape'
        orientation of the output image. if hemisphere is None (i.e., if data
        are bilateral), this argument is ignored.
    hemisphere : 'left' or 'right' or None
    cmap : str or :class:`~matplotlib.colors.Colormap` instance, default None
        colormap to use for plotting.
    transparent : bool
        make all white pixels in map transparent

    Returns
    -------
    None

    Notes
    -----
    For a list of available colormaps, see the wbplot.constants module or visit
    https://www.humanconnectome.org/software/workbench-command/-metric-palette.

    """
    # TODO

    cmap = plots.check_cmap(cmap)
    orientation = plots.check_orientation(orientation)
    images.check_dscalars(dscalars)

    # TODO call images.write_dense_image()

    scene, width, height = plots.map_params_to_scene(
        dtype='pscalars', orientation=orientation, hemisphere=hemisphere)

    cmd = 'wb_command -show-scene "{}" {} "{}" {} {}'.format(
        config.SCENE_FILE, scene, file_out, width, height)
    cmd += " >/dev/null 2>&1"
    system(cmd)

    if transparent:
        plots.make_transparent(file_out)
