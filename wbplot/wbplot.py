from . import config, constants
from .utils import plots, images
import nibabel as nib
import numpy as np
from os import system, remove, rename
from os.path import sep, join

# Uncomment the line below to suppress console statements generated by nibabel
# nib.imageglobals.logger.disabled = True


def pscalar(file_out, pscalars, vrange=None, orientation='portrait',
            hemisphere=None, cmap=None, transparent=False):
    """

    Parameters
    ----------
    file_out : str
        absolute path to filename where image is saved
    pscalars : numpy.ndarray
        parcel scalar values
    vrange : tuple, default None
        (min, max) of data for plotting
    orientation : 'portrait' or 'landscape'
        orientation of the output image. if hemisphere is None (i.e., if data
        are bilateral), this argument is ignored.
    hemisphere : 'left' or 'right' or None
    cmap : str or :class:`~matplotlib.colors.Colormap` instance, default None
        colormap to use for plotting.
    transparent : bool
        make all white pixels in map transparent

    Returns
    -------

    Notes
    -----
    For a list of available colormaps, see the wbplot.constants module or visit
    https://www.humanconnectome.org/software/workbench-command/-metric-palette.

    """

    cmap = plots.check_cmap(cmap)
    orientation = plots.check_orientation(orientation)
    hemisphere = images.check_hemisphere(hemisphere)

    images.write_parcellated_image(
        data=pscalars, fout=constants.DLABEL_FILE, vrange=vrange, cmap=cmap)

    scene, width, height = plots.map_params_to_scene(
        dtype='pscalars', orientation=orientation, hemisphere=hemisphere)

    cmd = 'wb_command -show-scene "{}" {} "{}" {} {}'.format(
        config.SCENE_FILE, scene, file_out, width, height)
    cmd += " >/dev/null 2>&1"
    system(cmd)

    if transparent:
        plots.make_transparent(file_out)


def dscalar(file_out, dscalars, vrange=None, orientation='portrait',
            hemisphere=None, cmap=None, transparent=False):

    """
    Save an image of dense scalars using Connnectome Workbench.

    Parameters
    ----------
    file_out : str
        absolute path to filename where image is saved
    dscalars : numpy.ndarray
        dense scalar values
    vrange : tuple, default None
        (min, max) of data for plotting
    orientation : 'portrait' or 'landscape'
        orientation of the output image. if hemisphere is None (i.e., if data
        are bilateral), this argument is ignored.
    hemisphere : 'left' or 'right' or None
    cmap : str or :class:`~matplotlib.colors.Colormap` instance, default None
        colormap to use for plotting.
    transparent : bool
        make all white pixels in map transparent

    Returns
    -------
    None

    Notes
    -----
    For a list of available colormaps, see the wbplot.constants module or visit
    https://www.humanconnectome.org/software/workbench-command/-metric-palette.

    """

    cmap = plots.check_cmap(cmap)
    orientation = plots.check_orientation(orientation)
    images.check_dscalars(dscalars)

    new_data = np.copy(dscalars)

    # Load template NIFTI file (into which `dscalars` will be inserted)
    of = nib.load(constants.DSCALAR_FILE)

    # Load data from the template file
    temp_data = np.array(of.get_data())

    # # Overwrite existing template data with `dscalars`

    # First, write new data to existing template file
    data_to_write = new_data.reshape(np.shape(temp_data))
    new_img = nib.Nifti2Image(data_to_write, affine=of.affine, header=of.header)
    prefix = constants.DSCALAR_FILE.split(".dscalar.nii")[0]
    nib.save(new_img, constants.DSCALAR_FILE)

    # Use Workbench's command line utilities to change the color palette. Note
    # that this command requires saving to a new CIFTI file, which I will do
    # before overwriting the old file
    cifti_out = prefix + "_temp.dscalar.nii"
    cifti_in = constants.DSCALAR_FILE
    cmd = "wb_command -cifti-palette %s %s %s -palette-name %s" % (
        cifti_in, "MODE_AUTO_SCALE_PERCENTAGE", cifti_out, cmap)
    system(cmd)

    # Delete existing template file; rename new file to replace old template
    remove(cifti_in)
    rename(cifti_out, cifti_in)
    scene, width, height = plots.map_params_to_scene(
        dtype='pscalars', orientation=orientation, hemisphere=hemisphere)

    cmd = 'wb_command -show-scene "{}" {} "{}" {} {}'.format(
        config.SCENE_FILE, scene, file_out, width, height)
    cmd += " >/dev/null 2>&1"
    system(cmd)

    if transparent:
        plots.make_transparent(file_out)
